name: Terraform Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose Terraform action to perform (plan, apply)'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
      target_resource:
        description: 'DynamoDB table name (e.g., table1) or AWS resource (e.g., aws_instance.my_instance)'
        required: false
        default: ''

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1  # You can hardcode the region or use a GitHub secret for flexibility

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: 1.0.0

      - name: Terraform Init
        run: terraform init

      # Terraform Plan: Use input format to distinguish between DynamoDB tables and other resources
      - name: Terraform Plan
        if: ${{ github.event.inputs.action == 'plan' }}
        run: |
          if [[ "${{ github.event.inputs.target_resource }}" == *.* ]]; then
            # If input contains a period (.), treat it as a non-DynamoDB resource
            echo "Running plan for AWS resource: ${{ github.event.inputs.target_resource }}"
            terraform plan --target=${{ github.event.inputs.target_resource }}
          elif [ "${{ github.event.inputs.target_resource }}" != "" ]; then
            # Otherwise, treat input as a DynamoDB table
            table_name="${{ github.event.inputs.target_resource }}"
            echo "Running plan for DynamoDB table: $table_name"
            terraform plan --target="aws_dynamodb_table.dynamodb_tables[\"$table_name\"]"
          else
            # Run plan for all resources if no input is provided
            echo "Running plan for all resources"
            terraform plan
          fi

      # Terraform Apply: Use input format to distinguish between DynamoDB tables and other resources
      - name: Terraform Apply
        if: ${{ github.event.inputs.action == 'apply' }}
        run: |
          if [[ "${{ github.event.inputs.target_resource }}" == *.* ]]; then
            # If input contains a period (.), treat it as a non-DynamoDB resource
            echo "Running apply for AWS resource: ${{ github.event.inputs.target_resource }}"
            terraform apply --target=${{ github.event.inputs.target_resource }} -auto-approve
          elif [ "${{ github.event.inputs.target_resource }}" != "" ]; then
            # Otherwise, treat input as a DynamoDB table
            table_name="${{ github.event.inputs.target_resource }}"
            echo "Running apply for DynamoDB table: $table_name"
            terraform apply --target="aws_dynamodb_table.dynamodb_tables[\"$table_name\"]" -auto-approve
          else
            # Run apply for all resources if no input is provided
            echo "Running apply for all resources"
            terraform apply -auto-approve
          fi
