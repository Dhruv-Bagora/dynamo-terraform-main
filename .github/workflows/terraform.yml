name: Terraform Pipeline

on:
  workflow_dispatch:
    inputs:
      action:
        description: 'Choose Terraform action to perform (plan, apply)'
        required: true
        default: 'plan'
        type: choice
        options:
          - plan
          - apply
      resource_scope:
        description: 'Choose whether to run the action on all resources or custom resources'
        required: true
        default: 'all'
        type: choice
        options:
          - all
          - custom
      target_resource:
        description: 'Target Resource'
        required: false
        default: ''

jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v3
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1 

      - name: Set up Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 5.0.0

      - name: Terraform Init
        run: terraform init
      
      - name: Run Terraform Action (Plan or Apply)
        run: |
          action="${{ github.event.inputs.action }}"
          
          if [ "${{ github.event.inputs.resource_scope }}" == "all" ]; then
            echo "Running $action for all resources"
            if [ "$action" == "apply" ]; then
              terraform apply -auto-approve
            else
              terraform plan
            fi
          elif [ "${{ github.event.inputs.resource_scope }}" == "custom" ] && [ "${{ github.event.inputs.target_resource }}" != "" ]; then
            IFS=',' read -r -a resources <<< "${{ github.event.inputs.target_resource }}"
            
            for resource in "${resources[@]}"; do
              if [[ "$resource" == *.* ]]; then
                echo "Running $action for AWS resource: $resource"
                if [ "$action" == "apply" ]; then
                  terraform apply --target=$resource -auto-approve
                else
                  terraform plan --target=$resource
                fi
              else
                echo "Running $action for DynamoDB table: $resource"
                if [ "$action" == "apply" ]; then
                  terraform apply --target="aws_dynamodb_table.dynamodb_tables[\"$resource\"]" -auto-approve
                else
                  terraform plan --target="aws_dynamodb_table.dynamodb_tables[\"$resource\"]"
                fi
              fi
            done
          else
            echo "No valid target resource provided."
            exit 1
          fi
